{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","query","setQuery","weather","setWeather","api","className","main","temp","type","onChange","e","target","value","placeholder","onKeyPress","key","fetch","then","response","json","result","console","log","name","sys","country","date","day","getDay","month","getMonth","year","getFullYear","d","getDate","dateBuilder","Date","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MA4DeA,MA1Df,WACE,MAAyBC,mBAAS,IAAlC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EACA,mCADAA,EAEC,2CAwBP,OACE,qBAAKC,UACsB,qBAAjBH,EAAQI,MACZJ,EAAQI,KAAKC,KAAM,GACrB,WACA,MAJJ,SAKE,iCACG,qBAAKF,UAAU,aAAf,SACE,uBAAOG,KAAK,OAAOH,UAAU,eAAeI,SAAW,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QAC9EC,YAAY,WAAWD,MAAOZ,EAAOc,WA9B9B,SAACJ,GACF,UAAVA,EAAEK,KACHC,MAAM,GAAD,OAAIZ,EAAJ,qBAAwBJ,EAAxB,+BAAoDI,IACxDa,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,WAyBa,oBAAflB,EAAQI,KACjB,sBAAKD,UAAU,cAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BH,EAAQqB,KAAnC,KAA2CrB,EAAQsB,IAAIC,WACvD,qBAAKpB,UAAU,OAAf,SAzBS,SAACqB,GAEf,IAEIC,EAFO,CAAC,SAAU,UAAW,YAAa,WAAY,SAAU,WAAW,UAEhED,EAAKE,UAChBC,EAFQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEvEH,EAAKI,YACpBC,EAAOL,EAAKM,cACZC,EAAIP,EAAKQ,UACb,MAAM,GAAN,OAAUP,EAAV,YAAiBM,EAAjB,YAAsBJ,EAAtB,YAA+BE,GAiBHI,CAAY,IAAIC,WAEzC,sBAAK/B,UAAU,eAAf,UACG,sBAAKA,UAAU,OAAf,UAAuBH,EAAQI,KAAKC,KAApC,WACA,qBAAKF,UAAU,UAAf,SAA0BH,EAAQA,QAAQ,GAAGI,aAG9C,SC1CE+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.02b07931.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\nfunction App() {\n  const [query,setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  \n  const api = {\n    key:'20cf7e03256324047c9527c09ac01477',\n    url: 'https://api.openweathermap.org/data/2.5/',\n\n  }\n  const handleKey=(e)=>{\n    if(e.key === \"Enter\"){\n      fetch(`${api.url}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(response=> response.json())\n      .then(result=> {\n        setWeather(result);\n        setQuery('');\n        console.log(result);\n      } );     \n    }\n  }\n  const dateBuilder = (date) =>{\n        \n        let days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\",\"Sunday\"];\n        let months =[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n        let day = days[date.getDay()];\n        let month = months[date.getMonth()];\n        let year = date.getFullYear();\n        let d = date.getDate();\n        return `${day} ${d} ${month} ${year}`;\n  }\n  return (\n    <div className={\n      (typeof weather.main !== 'undefined')\n      ? ((weather.main.temp >25)\n      ? 'App warm' : 'App')\n      : 'App'}>\n      <main>\n         <div className=\"search-box\">\n           <input type=\"text\" className=\"search-input\" onChange ={e => setQuery(e.target.value)}\n           placeholder=\"Enter...\" value={query} onKeyPress={handleKey}></input>\n         </div>\n         {(typeof weather.main !=\"undefined\") ?(\n         <div className=\"weather-box\">\n           <div className=\"location-info\">\n             <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n             <div className=\"date\">{dateBuilder(new Date())}</div>\n           </div>\n           <div className=\"weather-info\">\n              <div className=\"temp\">{weather.main.temp}Â°C</div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n           </div>\n         </div>\n         ): ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}